//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/StackAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StackAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StackAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""StackAction"",
    ""maps"": [
        {
            ""name"": ""Stack"",
            ""id"": ""813eb8c8-f61f-498a-b362-a6c0561a5d76"",
            ""actions"": [
                {
                    ""name"": ""Stop"",
                    ""type"": ""Button"",
                    ""id"": ""a226b12a-cecb-403d-9f66-68fe6dc82801"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""11566d36-ebb2-41f6-8bbf-b776b465172e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a1c5a58-5cf4-4822-817a-2260c7e13ec9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e21238c-cd91-449f-8377-a9d0a38e1b87"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Stack
        m_Stack = asset.FindActionMap("Stack", throwIfNotFound: true);
        m_Stack_Stop = m_Stack.FindAction("Stop", throwIfNotFound: true);
        m_Stack_Start = m_Stack.FindAction("Start", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Stack
    private readonly InputActionMap m_Stack;
    private IStackActions m_StackActionsCallbackInterface;
    private readonly InputAction m_Stack_Stop;
    private readonly InputAction m_Stack_Start;
    public struct StackActions
    {
        private @StackAction m_Wrapper;
        public StackActions(@StackAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Stop => m_Wrapper.m_Stack_Stop;
        public InputAction @Start => m_Wrapper.m_Stack_Start;
        public InputActionMap Get() { return m_Wrapper.m_Stack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StackActions set) { return set.Get(); }
        public void SetCallbacks(IStackActions instance)
        {
            if (m_Wrapper.m_StackActionsCallbackInterface != null)
            {
                @Stop.started -= m_Wrapper.m_StackActionsCallbackInterface.OnStop;
                @Stop.performed -= m_Wrapper.m_StackActionsCallbackInterface.OnStop;
                @Stop.canceled -= m_Wrapper.m_StackActionsCallbackInterface.OnStop;
                @Start.started -= m_Wrapper.m_StackActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_StackActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_StackActionsCallbackInterface.OnStart;
            }
            m_Wrapper.m_StackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Stop.started += instance.OnStop;
                @Stop.performed += instance.OnStop;
                @Stop.canceled += instance.OnStop;
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
            }
        }
    }
    public StackActions @Stack => new StackActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IStackActions
    {
        void OnStop(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
    }
}
